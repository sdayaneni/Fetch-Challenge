1. Why did you choose the tools, libraries, and language you used for the coding exercise?
    
    For this project, I chose to build the API using Flask and Python. I chose to do this, as I have had previous experience in developing APIs using the Flask framework, so I have more comfortability with it as opposed to some of the other alternatives. Additionally, I also chose to use SQLite for my database, as I knew that the application would be relatively small scale, so I didn't want to overcomplicate the setup that I had for storing the data. I also thought that since the data was more structured in terms of the items I had to store, a relational model with a table format would work better than a document store. For documentation, I chose to use Swagger in order to provide explanations for my endpoints and to make my application more intuitive. I'd seen Swagger used in other APIs that I've incorporated into past projects, so I thought that I could include it into mine. For testing purposes, I chose to use PyTest, as I felt that it was pretty standard for unit testing Python applications. Finally, for the interface, I used HTML and CSS to provide something for the user to see just so that the application was easy to use.

2. What are the advantages and disadvantages of your solution?

    Advantages: An advantage of my solution is that I've made the code modular. This helps with scalability in case more endpoints or aspects to the application need to be added. In that case, another module can be added to the API in a pretty similar way. The application also adds (although minimal), a layer of security via API tokens. This would help ensure that any unauthorized users aren't able to access the application and make updates to the data that is stored. It also includes a testing consideration with PyTest. This would help ensure that any bugs are filtered out before the product is presented to users.
    Disadvantages: A disadvantages of my solutions is that my choice of storing that data is not scalable. I have a single file database that stores data with SQLite, and as the application might gain more traffic + users, switching to another solution such as PostgreSQL or MySQL would be more practical. My authentication choice is also very minimal. Instead of simple token generation and validation, I could switch to another solution, such as OAuth or JWT which would provide a more comprehensive measure of security.

3. What has been a favorite school/personal project thus far? What about it that challenged you?

    My favorite personal project thus far has been my College Fantasy Football App. It's something that I'm continuously developing, and I honestly have a lot of fun doing it. College Football has been a near obsession of mine for a while now, and I spend a good part of my Saturdays in the fall watching the weeks games, so I thought that I could build an app that would model the Fantasy Football experience for the college level. To create it, I used the React Native framework, as it was a mobile app, in addition to a bunch of other technologies, including existing REST APIs on the internet. Something about the project that challenged me was honestly just getting a sense of direction of where I wanted to start from when approaching the project. I had a really big idea, but hadn't built something at that scale before, so I had to break down the idea into a lot of smaller steps so that it was clear where I could begin developing from. Once I did that, a lot of inspiration for my app came in the process of developing it, and I feel like I benefited a lot from just taking action and starting somewhere, so that the rest would fall into place as I continued.